@page "/carrito"
@using DTOs
@using API.Clients
@using Microsoft.JSInterop
@using BlazorApp.Client.Layout
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject AuthStateProvider authStateProvider
@rendermode InteractiveWebAssembly

<PageTitle>Mi Carrito</PageTitle>

<h3>Mi Carrito de Compras</h3>

@if (cargando)
{
    <p><em>Cargando carrito...</em></p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (carrito == null || carrito.Items.Count == 0)
{
    <p>Tu carrito está vacío.</p>
    <button class="btn btn-primary" @onclick='() => navigationManager.NavigateTo("/productos")'>Ver Productos</button>
}
else
{
  
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div class="form-check">
            <input class="form-check-input"
                   type="checkbox"
                   id="chkAll"
                   @onchange="SelectAllChanged"
                   checked="@_selectAll" />
            <label class="form-check-label" for="chkAll">Seleccionar todo</label>
        </div>

        <button class="btn btn-outline-danger"
                disabled="@(!_seleccion.Any())"
                @onclick="EliminarSeleccionados">
            Eliminar seleccionados (@_seleccion.Count)
        </button>
    </div>

    <div class="table-responsive mb-3">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th style="width:42px"></th>
                    <th>Producto</th>
                    <th class="text-end">Precio Unit.</th>
                    <th class="text-center">Cantidad</th>
                    <th class="text-center">Descuento</th>
                    <th class="text-end">Subtotal</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in carrito.Items)
                {
                    <tr>
                        <td class="text-center align-middle">
                            <input type="checkbox"
                                   class="form-check-input"
                                   checked="@_seleccion.Contains(item.IdProducto)"
                                   @onchange="(e) => RowCheckboxChanged(item.IdProducto, e)" />
                        </td>
                        <td>@item.ProductoNombre</td>
                        <td class="text-end">@item.PrecioUnitario.ToString("C")</td>
                        <td class="text-center">@item.Cantidad</td>
                        <td class="text-center">
                            @if (item.Porcentaje.HasValue)
                            {
                                <span class="badge bg-success" title="@item.CodigoDescuento">
                                    @item.Porcentaje.Value.ToString("N0")%
                                </span>
                            }
                            else
                            {

                                <span>-</span>
                            }
                        </td>
                        <td class="text-end">@item.Subtotal.ToString("C")</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-outline-danger"
                                    title="Eliminar del carrito"
                                    @onclick="() => EliminarItem(item)">
                                <span class="bi bi-trash-fill" aria-hidden="true"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4" class="text-end fw-bold">TOTAL:</td>
                    <td class="text-end fw-bold">@carrito.Total.ToString("C")</td>
                    <td colspan="2"></td>
                </tr>
            </tfoot>
        </table>
    </div>

    <div class="row gy-3">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Código de descuento..." @bind="codigoDescuento" />
                <button class="btn btn-outline-secondary" type="button" @onclick="AplicarCodigo" disabled="@aplicandoCodigo">
                    @if (aplicandoCodigo)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span>Aplicar</span>
                    }
                </button>
            </div>
            @if (!string.IsNullOrEmpty(errorCodigo))
            {
                <div class="text-danger mt-1 small">@errorCodigo</div>
            }
            @if (!string.IsNullOrEmpty(successCodigo))
            {
                <div class="text-success mt-1 small">@successCodigo</div>
            }
        </div>

        <div class="col-md-6 text-md-end">
            <button class="btn btn-secondary me-2" @onclick='() => navigationManager.NavigateTo("/productos")'>Seguir Comprando</button>
            <button class="btn btn-success" @onclick="ConfirmarCompra" disabled="@confirmandoCompra">
                @if (confirmandoCompra)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <span>Confirmar Compra</span>
                }
            </button>
        </div>
    </div>
}

@code {
    private CarritoDTO? carrito;
    private bool cargando = true;
    private string? error;

    private string? codigoDescuento;
    private string? errorCodigo;
    private string? successCodigo;
    private bool aplicandoCodigo = false;
    private bool confirmandoCompra = false;

 
    private readonly HashSet<int> _seleccion = new();
    private bool _selectAll = false;

   
    [CascadingParameter] public MainLayout? Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authStateProvider.CurrentUser == null || authStateProvider.CurrentUser.TipoUsuario != "Cliente")
        {
            navigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }
        await CargarCarrito();
    }

    private async Task CargarCarrito()
    {
        cargando = true;
        error = null;
        carrito = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            carrito = await CarritoApiClient.GetAsync(authStateProvider.CurrentUser!.Id);

            
            _seleccion.RemoveWhere(id => carrito.Items.All(i => i.IdProducto != id));
            _selectAll = carrito.Items.Count > 0 && _seleccion.Count == carrito.Items.Count;
        }
        catch (Exception ex)
        {
            error = $"Error al cargar el carrito: {ex.Message}";
            Console.WriteLine(error);
        }
        finally
        {
            cargando = false;
        }
    }

   
    private void RowCheckboxChanged(int idProducto, ChangeEventArgs e)
    {
        var isChecked = e?.Value is bool b && b;
        if (isChecked) _seleccion.Add(idProducto);
        else _seleccion.Remove(idProducto);

        _selectAll = carrito?.Items.Count > 0 && _seleccion.Count == carrito!.Items.Count;
    }

  
    private void SelectAllChanged(ChangeEventArgs e)
    {
        var check = e?.Value is bool b && b;
        _selectAll = check;
        _seleccion.Clear();

        if (check && carrito?.Items != null)
            foreach (var it in carrito.Items) _seleccion.Add(it.IdProducto);
    }

    private async Task EliminarSeleccionados()
    {
        if (!_seleccion.Any()) return;

        bool confirmado = await jsRuntime.InvokeAsync<bool>("confirm", $"¿Eliminar {_seleccion.Count} producto(s) del carrito?");
        if (!confirmado) return;

        try
        {
            
            await CarritoApiClient.RemoveManyAsync(authStateProvider.CurrentUser!.Id, _seleccion);

            

            _seleccion.Clear();
            _selectAll = false;

            await CargarCarrito();
            if (Layout is not null) await Layout.ActualizarBadgeCarritoAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al eliminar seleccionados: {ex.Message}";
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
    }

    private async Task EliminarItem(CarritoItemDTO item)
    {
        bool confirmado = await jsRuntime.InvokeAsync<bool>("confirm", $"¿Quitar '{item.ProductoNombre}' del carrito?");
        if (!confirmado) return;

        try
        {
            await CarritoApiClient.RemoveAsync(authStateProvider.CurrentUser!.Id, item.IdProducto);
            _seleccion.Remove(item.IdProducto);

            await CargarCarrito();
            if (Layout is not null) await Layout.ActualizarBadgeCarritoAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al eliminar item: {ex.Message}";
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
    }

    private async Task AplicarCodigo()
    {
        if (string.IsNullOrWhiteSpace(codigoDescuento)) return;

        aplicandoCodigo = true;
        errorCodigo = null;
        successCodigo = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            await CarritoApiClient.AplicarCodigoAsync(authStateProvider.CurrentUser!.Id, codigoDescuento);
            successCodigo = $"Código '{codigoDescuento.ToUpper()}' aplicado.";
            codigoDescuento = string.Empty;

            await CargarCarrito();
            if (Layout is not null) await Layout.ActualizarBadgeCarritoAsync();
        }
        catch (Exception ex)
        {
            var desc = await DescuentoApiClient.ValidarCodigoAsync(codigoDescuento);
            errorCodigo = desc is null
                ? "El código es inválido o está vencido."
                : "El código es válido, pero no aplica a ningún producto de tu carrito.";
            Console.WriteLine($"Error al aplicar código: {ex.Message}");
        }
        finally
        {
            aplicandoCodigo = false;
        }
    }

    private async Task ConfirmarCompra()
    {
        bool confirmado = await jsRuntime.InvokeAsync<bool>("confirm", $"¿Confirmar la compra por un total de {carrito?.Total:C}?");
        if (!confirmado) return;

        confirmandoCompra = true;
        error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var resultado = await CarritoApiClient.ConfirmarAsync(authStateProvider.CurrentUser!.Id);
            await jsRuntime.InvokeVoidAsync("alert", $"¡Compra confirmada!\nID Venta: {resultado.IdVenta}\nTotal: {resultado.Total:C}");

            if (Layout is not null) await Layout.ActualizarBadgeCarritoAsync();
            navigationManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            error = $"Error al confirmar la compra: {ex.Message}";
            Console.WriteLine(error);
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
        finally
        {
            confirmandoCompra = false;
        }
    }
}
