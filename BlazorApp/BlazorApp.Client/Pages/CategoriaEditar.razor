@page "/categorias/editar/{IdCategoria:int}" // Ruta con parámetro ID
@using DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly

<PageTitle>Editar Categoría</PageTitle>

<h3>Editar Categoría</h3>

@if (categoriaParaEditar == null && cargando) 
{
    <p><em>Cargando datos de la categoría...</em></p>
}
else if (categoriaParaEditar != null) 
{
    <EditForm Model="categoriaParaEditar" OnValidSubmit="HandleValidSubmit" FormName="editarCategoriaForm">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre:</label>
            <InputText id="nombre" class="form-control" @bind-Value="categoriaParaEditar.Nombre" />
            <ValidationMessage For="() => categoriaParaEditar.Nombre" />
        </div>

        <div class="mb-3">
            <label for="descripcion" class="form-label">Descripción:</label>
            <InputTextArea id="descripcion" class="form-control" @bind-Value="categoriaParaEditar.Descripcion" />
            <ValidationMessage For="() => categoriaParaEditar.Descripcion" />
        </div>

        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        <button type="button" class="btn btn-secondary" @onclick="VolverACategorias">Cancelar</button>

    </EditForm>
}
else 
{
    <p class="text-danger">No se pudo cargar la categoría para editar o no existe.</p>
    <button class="btn btn-secondary" @onclick="VolverACategorias">Volver al listado</button>
}

@code {
    [Parameter] 
    public int IdCategoria { get; set; }

    
    private CategoriaDTO? categoriaParaEditar;

    private bool cargando = true; 
    private string? errorApi; 

    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            categoriaParaEditar = await Http.GetFromJsonAsync<CategoriaDTO>($"categorias/{IdCategoria}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar categoría para editar: {ex.Message}");
            categoriaParaEditar = null; 
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar categoría: {ex.Message}");
        }
        finally
        {
            cargando = false; 
        }
    }

   
    private async Task HandleValidSubmit()
    {
        errorApi = null;
        if (categoriaParaEditar == null) return; 

        
        if (string.IsNullOrWhiteSpace(categoriaParaEditar.Nombre))
        {
            await JSRuntime.InvokeVoidAsync("alert", "El nombre es obligatorio.");
            return;
        }

        try
        {
            
            var response = await Http.PutAsJsonAsync("categorias", categoriaParaEditar);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/categorias"); 
            }
            else
            {
                
                var errorContent = await response.Content.ReadAsStringAsync();
                errorApi = $"Error al guardar: {errorContent}";
                await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar cambios: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorApi = $"Error inesperado: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
        }
    }

    
    private void VolverACategorias()
    {
        Navigation.NavigateTo("/categorias");
    }
}