@page "/descuentos"
@using DTOs
@using API.Clients
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject BlazorApp.Client.AuthStateProvider Auth
@rendermode InteractiveWebAssembly

<PageTitle>Descuentos</PageTitle>
<h3>Descuentos</h3>

@if (cargando)
{
    <p><em>Cargando…</em></p>
}
else
{
    if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }

    <div class="d-flex justify-content-end gap-2 mb-3">
        <button class="btn btn-outline-secondary" @onclick="Cargar">Actualizar</button>
        <button class="btn btn-primary" @onclick="@(() => Nav.NavigateTo("/descuentos/agregar"))">Agregar</button>
    </div>

    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-light">
                <tr>
                    <th style="width:120px">Código</th>
                    <th>Producto</th>
                    <th class="text-end" style="width:90px">%</th>
                    <th style="width:170px">Inicio (local)</th>
                    <th style="width:170px">Caduca (local)</th>
                    <th>Descripción</th>
                    <th style="width:140px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var d in lista)
                {
                    var ini = DateTime.SpecifyKind(d.FechaInicioUtc, DateTimeKind.Utc).ToLocalTime();
                    var fin = DateTime.SpecifyKind(d.FechaCaducidadUtc, DateTimeKind.Utc).ToLocalTime();
                    <tr>
                        <td><code>@d.Codigo</code></td>
                        <td>@d.ProductoNombre</td>
                        <td class="text-end">@d.Porcentaje.ToString("N2")</td>
                        <td>@ini.ToString("g")</td>
                        <td>@fin.ToString("g")</td>
                        <td>@d.Descripcion</td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="@(() => Editar(d.IdDescuento))">Editar</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => Eliminar(d))">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<DescuentoDTO> lista = new();
    private bool cargando = true;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        
        var u = Auth.CurrentUser;
        if (u is null) { Nav.NavigateTo("/login"); return; }
        if (!string.Equals(u.TipoUsuario, "Vendedor", StringComparison.OrdinalIgnoreCase))
        { Nav.NavigateTo("/promos"); return; }

        await Cargar();
    }

    private async Task Cargar()
    {
        try
        {
            cargando = true; error = null;
          
            lista = (await DescuentoApiClient.GetAllAsync())
                        .OrderBy(d => d.ProductoNombre)
                        .ThenBy(d => d.Codigo)
                        .ToList();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            cargando = false;
        }
    }

    private void Editar(int id) => Nav.NavigateTo($"/descuentos/editar/{id}");

    private async Task Eliminar(DescuentoDTO d)
    {
        var ok = await JS.InvokeAsync<bool>("confirm", $"¿Eliminar descuento {d.Codigo}?");
        if (!ok) return;

        try
        {
            await DescuentoApiClient.DeleteAsync(d.IdDescuento);
            await Cargar();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
