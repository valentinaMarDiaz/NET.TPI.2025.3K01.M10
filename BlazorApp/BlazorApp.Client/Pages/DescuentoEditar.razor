@page "/descuentos/editar/{Id:int}"
@using DTOs
@using API.Clients
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject BlazorApp.Client.AuthStateProvider AuthStateProvider
@rendermode InteractiveWebAssembly

<PageTitle>Editar descuento</PageTitle>
<h3>Editar descuento</h3>

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (notFound)
{
    <div class="alert alert-warning">No se encontró el descuento.</div>
    <button class="btn btn-secondary" @onclick="Volver">Volver</button>
}
else
{
    <EditForm Model="model" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger">@error</div>
        }

        <div class="mb-3">
            <label class="form-label">Producto *</label>
            <InputSelect class="form-select" @bind-Value="model.IdProducto">
                <option value="0">-- Seleccione --</option>
                @foreach (var p in productos)
                {
                    <option value="@p.IdProducto">@p.Nombre</option>
                }
            </InputSelect>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Inicio (local) *</label>
                <input class="form-control" type="datetime-local" @bind="inicioLocal" />
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label">Caduca (local) *</label>
                <input class="form-control" type="datetime-local" @bind="caducaLocal" />
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Código *</label>
            <InputText class="form-control" @bind-Value="codigo" @bind-Value:event="oninput" />
        </div>

        <div class="mb-3">
            <label class="form-label">Descripción *</label>
            <InputText class="form-control" @bind-Value="model.Descripcion" />
        </div>

        <div class="mb-3">
            <label class="form-label">Porcentaje *</label>
            <InputNumber class="form-control" TValue="decimal" @bind-Value="model.Porcentaje" />
        </div>

        <button class="btn btn-primary" type="submit">Guardar</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="Volver">Cancelar</button>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; } 

    private DescuentoCUDTO model = new();
    private List<ProductoDTO> productos = new();
    private DateTime inicioLocal, caducaLocal;
    private string codigo = ""; 
    private string? error;
    private bool cargando = true, notFound = false;

    protected override async Task OnInitializedAsync()
    {
        if (AuthStateProvider.CurrentUser is null) { Nav.NavigateTo("/login"); return; }

        try
        {
            productos = (await ProductoApiClient.GetAllAsync()).ToList();

            var existing = await DescuentoApiClient.GetAsync(Id);
            if (existing is null) { notFound = true; return; }

            model = new DescuentoCUDTO
            {
                IdDescuento = existing.IdDescuento,
                IdProducto = existing.IdProducto,
                Descripcion = existing.Descripcion,
                Porcentaje = existing.Porcentaje
            };

            inicioLocal = DateTime.SpecifyKind(existing.FechaInicioUtc, DateTimeKind.Utc).ToLocalTime();
            caducaLocal = DateTime.SpecifyKind(existing.FechaCaducidadUtc, DateTimeKind.Utc).ToLocalTime();
            codigo = existing.Codigo; 
        }
        catch (Exception ex) { error = ex.Message; }
        finally { cargando = false; }
    }

    private async Task Guardar()
    {
        error = null;

        if (model.IdProducto <= 0) { error = "Seleccione un producto."; return; }

        model.Codigo = (codigo ?? "").Trim().ToUpperInvariant(); 
        if (string.IsNullOrWhiteSpace(model.Codigo)) { error = "El código es obligatorio."; return; }

        if (model.Porcentaje <= 0 || model.Porcentaje > 100) { error = "El % debe ser > 0 y ≤ 100."; return; }
        if (caducaLocal < inicioLocal) { error = "Caducidad no puede ser menor al inicio."; return; }

        model.FechaInicioUtc = DateTime.SpecifyKind(inicioLocal, DateTimeKind.Local).ToUniversalTime();
        model.FechaCaducidadUtc = DateTime.SpecifyKind(caducaLocal, DateTimeKind.Local).ToUniversalTime();

        try
        {
            await DescuentoApiClient.UpdateAsync(model);
            Nav.NavigateTo("/descuentos");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void Volver() => Nav.NavigateTo("/descuentos");
}
