@page "/historial-precios"
@using DTOs
@using API.Clients
@using Microsoft.JSInterop
@using BlazorApp.Client
@inject AuthStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@rendermode InteractiveWebAssembly

<PageTitle>Historial de Precios</PageTitle>

<h3>Historial de Precios de Productos</h3>

@if (cargandoProductos)
{
    <p><em>Cargando productos...</em></p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
else
{
    <div class="row mb-3 align-items-end">
        
        <div class="col-md-6">
            <label for="productoSelect" class="form-label">Seleccione un Producto:</label>
            <select class="form-select" @onchange="OnProductoSeleccionado">
                <option value="0">-- Elija un producto --</option>
                @if (_productos != null)
                {
                    @foreach (var p in _productos)
                    {
                        <option value="@p.IdProducto">@p.Nombre (@p.IdProducto)</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-6">

            <button class="btn btn-secondary"
                    @onclick="GenerarPDF"
                    disabled="@(cargandoHistorial || _selectedProductId == 0 || _historial == null || _historial.Count == 0)">
                <span class="bi bi-file-pdf-fill" aria-hidden="true"></span> Exportar a PDF
            </button>
        </div>
    </div>

   
    @if (cargandoHistorial)
    {
        <p><em>Cargando historial...</em></p>
    }
    else if (_historial != null && _historial.Count > 0)
    {
        <div class="table-responsive">
            <table class="table table-sm table-striped table-bordered">
                <thead class="table-light">
                    <tr>
                        <th>Fecha y Hora (Local)</th>
                        <th class="text-end">Precio Registrado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var h in _historial)
                    {
                        <tr>
                            <td>@h.FechaModificacionUtc.ToLocalTime().ToString("g")</td>
                            <td class="text-end">@h.Valor.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("es-AR"))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (_selectedProductId > 0)
    {
        <p>Este producto no tiene cambios de precio registrados.</p>
    }
}

@code {
    private List<ProductoDTO>? _productos;
    private List<PrecioProductoDTO>? _historial;

    private int _selectedProductId = 0;
    private bool cargandoProductos = true;
    private bool cargandoHistorial = false;
    private string? error;

    private async Task GenerarPDF()
    {
        if (_historial == null || !_historial.Any() || _selectedProductId == 0)
        {
            await jsRuntime.InvokeVoidAsync("alert", "No hay historial para exportar para el producto seleccionado.");
            return;
        }

       
        var nombreProducto = _productos?.FirstOrDefault(p => p.IdProducto == _selectedProductId)?.Nombre ?? $"Producto_{_selectedProductId}";

        try
        {
           
            var datosParaPdf = _historial.Select(h => new
            {
                fechaModificacionUtc = h.FechaModificacionUtc,
                valor = h.Valor
            }).ToList();

            
            await jsRuntime.InvokeVoidAsync("generarPdfHistorialPrecios", nombreProducto, datosParaPdf);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al generar PDF: {ex.Message}");
            await jsRuntime.InvokeVoidAsync("alert", $"Error al generar el PDF: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        
        if (authStateProvider.CurrentUser == null || authStateProvider.CurrentUser.TipoUsuario != "Vendedor")
        {
            navigationManager.NavigateTo("/"); 
            return;
        }

        
        cargandoProductos = true;
        try
        {
            _productos = (await ProductoApiClient.GetAllAsync()).OrderBy(p => p.Nombre).ToList();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar productos: {ex.Message}";
        }
        finally
        {
            cargandoProductos = false;
        }
    }

    private async Task OnProductoSeleccionado(ChangeEventArgs e)
    {
       
        if (!int.TryParse(e.Value?.ToString(), out _selectedProductId))
        {
            _selectedProductId = 0;
        }

       
        if (_selectedProductId == 0)
        {
            _historial = null;
            await InvokeAsync(StateHasChanged);
            return;
        }

     
        cargandoHistorial = true;
        _historial = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            _historial = (await ProductoApiClient.GetHistorialAsync(_selectedProductId))
                            .OrderByDescending(h => h.FechaModificacionUtc)
                            .ToList();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar el historial: {ex.Message}";
        }
        finally
        {
            cargandoHistorial = false;
        }
    }
}