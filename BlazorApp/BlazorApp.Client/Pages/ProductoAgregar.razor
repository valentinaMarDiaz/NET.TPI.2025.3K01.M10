@page "/productos/agregar" 
@using DTOs
@inject HttpClient Http
@inject NavigationManager Navigation 
@rendermode InteractiveWebAssembly 

<PageTitle>Agregar Producto</PageTitle>

<h3>Agregar Nuevo Producto</h3>

<EditForm Model="nuevoProducto" OnValidSubmit="HandleValidSubmit" FormName="agregarProductoForm">
    
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre:</label>
        <InputText id="nombre" class="form-control" @bind-Value="nuevoProducto.Nombre" />
        <ValidationMessage For="() => nuevoProducto.Nombre" /> 
    </div>

    <div class="mb-3">
        <label for="descripcion" class="form-label">Descripción:</label>
        <InputTextArea id="descripcion" class="form-control" @bind-Value="nuevoProducto.Descripcion" /> 
    </div>

    <div class="mb-3">
        <label for="categoria" class="form-label">Categoría:</label>
        @if (categorias == null) 
        {
            <p>Cargando categorías...</p>
        }
        else 
        {
            <InputSelect id="categoria" class="form-select" @bind-Value="nuevoProducto.IdCatProducto">
               
                <option value="0">-- Seleccione una categoría --</option> 
                @foreach (var cat in categorias)
                {
                    <option value="@cat.IdCatProducto">@cat.Nombre</option>
                   
                }
            </InputSelect>
            <ValidationMessage For="() => nuevoProducto.IdCatProducto" />
        }
    </div>

    <div class="mb-3">
        <label for="precio" class="form-label">Precio Actual:</label>
        <InputNumber TValue="decimal" id="precio" class="form-control" @bind-Value="nuevoProducto.PrecioActual" /> 
        <ValidationMessage For="() => nuevoProducto.PrecioActual" />
    </div>

    <div class="mb-3">
        <label for="stock" class="form-label">Stock:</label>
        <InputNumber TValue="int" id="stock" class="form-control" @bind-Value="nuevoProducto.Stock" /> 
        <ValidationMessage For="() => nuevoProducto.Stock" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar Producto</button>
    <button type="button" class="btn btn-secondary" @onclick="VolverAProductos">Cancelar</button>

</EditForm>

@code {
    
    private ProductoDTO nuevoProducto = new ProductoDTO();

    
    private List<CategoriaDTO>? categorias;

   
    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            categorias = await Http.GetFromJsonAsync<List<CategoriaDTO>>("categorias");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar categorías: {ex.Message}");
            
        }
    }

    
    private async Task HandleValidSubmit()
    {
       
        if (nuevoProducto.IdCatProducto <= 0)
        {
            MessageBox(IntPtr.Zero, "Debe seleccionar una categoría.", "Validación", 0);
            return;
        }

        try
        {
           
            var response = await Http.PostAsJsonAsync("productos", nuevoProducto);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/productos"); 
            }
            else
            {
                
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error de API al guardar: {errorContent}");
                MessageBox(IntPtr.Zero, $"Error al guardar el producto: {errorContent}", "Error API", 0); 
            }
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Error inesperado al guardar producto: {ex.Message}");
            MessageBox(IntPtr.Zero, $"Error inesperado: {ex.Message}", "Error", 0);
        }
    }

    
    private void VolverAProductos()
    {
        Navigation.NavigateTo("/productos");
    }

    
    [System.Runtime.InteropServices.DllImport("user32.dll", CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public static extern int MessageBox(IntPtr hWnd, String text, String caption, uint type);
    
}