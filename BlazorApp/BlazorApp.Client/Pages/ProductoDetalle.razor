@page "/productos/{IdProducto:int}"
@using DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime


@rendermode InteractiveWebAssembly



<PageTitle>Detalle de Producto</PageTitle>

<h1>Detalle del Producto</h1>

@if (producto == null && cargando)
{
    <p><em>Cargando detalle del producto...</em></p>
}
else if (producto != null)
{
    <div class="card" style="width: 30rem;">
        <div class="card-body">
            <h5 class="card-title">@producto.Nombre</h5>
            <h6 class="card-subtitle mb-2 text-muted">Categoría: @producto.CategoriaNombre</h6>
            <p class="card-text">@producto.Descripcion</p>
            <ul class="list-group list-group-flush">
                <li class="list-group-item"><strong>ID:</strong> @producto.IdProducto</li>
                <li class="list-group-item"><strong>Precio:</strong> @producto.PrecioActual.ToString("C")</li>
                <li class="list-group-item"><strong>Stock:</strong> @producto.Stock</li>
            </ul>
            <button class="btn btn-warning mt-3 me-2" @onclick="IrAEditar">Editar Producto</button>
            <button class="btn btn-danger mt-3 me-2" @onclick="ConfirmarYEliminarProducto">Eliminar Producto</button>
            <button class="btn btn-secondary mt-3" @onclick="VolverAProductos">Volver al listado</button>
        </div>
    </div>
}
else
{
    <p class="text-danger">No se pudo cargar el producto o no existe.</p>
    <button class="btn btn-secondary" @onclick="VolverAProductos">Volver al listado</button>
}

@code {
    [Parameter]
    public int IdProducto { get; set; }

    private ProductoDTO? producto;
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        cargando = true;
        producto = null; 
        try
        {
            
            var response = await Http.GetAsync($"productos/{IdProducto}");

            
            Console.WriteLine($"Código de Estado de la API: {response.StatusCode}");

            string responseBody = await response.Content.ReadAsStringAsync();

      
            Console.WriteLine($"Cuerpo de la Respuesta (texto): '{responseBody}'"); 

            
            if (response.IsSuccessStatusCode && !string.IsNullOrWhiteSpace(responseBody))
            {
                try
                {
                    
                    producto = System.Text.Json.JsonSerializer.Deserialize<ProductoDTO>(responseBody, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                }
                catch (System.Text.Json.JsonException jsonEx)
                {
                  
                    Console.WriteLine($"Error al deserializar JSON: {jsonEx.Message}");
                    producto = null;
                }
            }
            else if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("La API respondió OK pero con cuerpo vacío.");
                producto = null;
            }
            else
            {
                
                Console.WriteLine($"Error de API (código no exitoso): {response.StatusCode}");
                producto = null;
            }
        }
        catch (HttpRequestException netEx) 
        {
            Console.WriteLine($"Error de red al llamar a la API: {netEx.Message}");
            producto = null;
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Error inesperado al cargar detalle: {ex.Message}");
            producto = null;
        }
        finally
        {
            cargando = false; 
        }
    }

    private void VolverAProductos()
    {
        Navigation.NavigateTo("/productos");
    }

    private void IrAEditar()
    {
        
        Navigation.NavigateTo($"/productos/editar/{IdProducto}");
    }

    private async Task ConfirmarYEliminarProducto()
    {
        
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que deseas eliminar el producto '{producto?.Nombre}'?");
        

        if (confirmado) 
        {
            try
            {
                
                var response = await Http.DeleteAsync($"productos/{IdProducto}");

                if (response.IsSuccessStatusCode)
                {
                    
                    await JSRuntime.InvokeVoidAsync("alert", "Producto eliminado con éxito.");
                    Navigation.NavigateTo("/productos"); 
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error de API al eliminar: {errorContent}");
                    await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar el producto: {errorContent}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error inesperado al eliminar: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
            }
        }
        
    }


}