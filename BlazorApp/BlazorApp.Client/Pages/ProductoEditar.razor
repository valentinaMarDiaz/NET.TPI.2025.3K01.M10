@page "/productos/editar/{IdProducto:int}" 
@using DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly

<PageTitle>Editar Producto</PageTitle>

<h3>Editar Producto</h3>

@if (productoParaEditar == null && cargando) 
{
    <p><em>Cargando datos del producto...</em></p>
}
else if (productoParaEditar != null) 
{
    <EditForm Model="productoParaEditar" OnValidSubmit="HandleValidSubmit" FormName="editarProductoForm">
        <DataAnnotationsValidator />

       
        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre:</label>
            <InputText id="nombre" class="form-control" @bind-Value="productoParaEditar.Nombre" />
            <ValidationMessage For="() => productoParaEditar.Nombre" />
        </div>

        <div class="mb-3">
            <label for="descripcion" class="form-label">Descripción:</label>
            <InputTextArea id="descripcion" class="form-control" @bind-Value="productoParaEditar.Descripcion" />
        </div>

        <div class="mb-3">
            <label for="categoria" class="form-label">Categoría:</label>
            @if (categorias == null)
            {
                <p>Cargando categorías...</p>
            }
            else
            {
                <InputSelect id="categoria" class="form-select" @bind-Value="productoParaEditar.IdCatProducto">
                    <option value="0">-- Seleccione una categoría --</option>
                    @foreach (var cat in categorias)
                    {
                        <option value="@cat.IdCatProducto">@cat.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => productoParaEditar.IdCatProducto" />
            }
        </div>

        <div class="mb-3">
            <label for="precio" class="form-label">Precio Actual:</label>
            <InputNumber TValue="decimal" id="precio" class="form-control" @bind-Value="productoParaEditar.PrecioActual" />
            <ValidationMessage For="() => productoParaEditar.PrecioActual" />
        </div>

        <div class="mb-3">
            <label for="stock" class="form-label">Stock:</label>
            <InputNumber TValue="int" id="stock" class="form-control" @bind-Value="productoParaEditar.Stock" />
            <ValidationMessage For="() => productoParaEditar.Stock" />
        </div>

        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        <button type="button" class="btn btn-secondary" @onclick="VolverADetalle">Cancelar</button>

    </EditForm>
}
else 
{
    <p class="text-danger">No se pudo cargar el producto para editar o no existe.</p>
    <button class="btn btn-secondary" @onclick="VolverAProductos">Volver al listado</button>
}


@code {
    [Parameter] 
    public int IdProducto { get; set; }

    
    private ProductoDTO? productoParaEditar;

   
    private List<CategoriaDTO>? categorias;

    private bool cargando = true; 
    private string? errorApi; 

    
    protected override async Task OnInitializedAsync()
    {
        try
        {
           
            categorias = await Http.GetFromJsonAsync<List<CategoriaDTO>>("categorias");

            
            productoParaEditar = await Http.GetFromJsonAsync<ProductoDTO>($"productos/{IdProducto}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos para editar: {ex.Message}");
            productoParaEditar = null; 
        }
        finally
        {
            cargando = false;
        }
    }

    
    private async Task HandleValidSubmit()
    {
        errorApi = null; 
        if (productoParaEditar == null) return; 

       
        if (productoParaEditar.IdCatProducto <= 0)
        {
            MessageBox(IntPtr.Zero, "Debe seleccionar una categoría.", "Validación", 0);
            return;
        }

        try
        {
            
            var response = await Http.PutAsJsonAsync("productos", productoParaEditar);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo($"/productos/{IdProducto}"); 
            }
            else
            {
                
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error de API al actualizar: {errorContent}");
                errorApi = $"Error al guardar: {errorContent}"; 
                MessageBox(IntPtr.Zero, $"Error al guardar cambios: {errorContent}", "Error API", 0);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado al guardar cambios: {ex.Message}");
            errorApi = $"Error inesperado: {ex.Message}";
            MessageBox(IntPtr.Zero, $"Error inesperado: {ex.Message}", "Error", 0);
        }
    }

    
    private void VolverADetalle()
    {
        Navigation.NavigateTo($"/productos/{IdProducto}");
    }
    
    private void VolverAProductos()
    {
        Navigation.NavigateTo("/productos");
    }

    
    [System.Runtime.InteropServices.DllImport("user32.dll", CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public static extern int MessageBox(IntPtr hWnd, String text, String caption, uint type);
  
}