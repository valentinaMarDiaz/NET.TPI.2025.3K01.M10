@page "/productos"
@using DTOs
@using API.Clients
@using Microsoft.JSInterop
@using BlazorApp.Client.Layout 
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthStateProvider AuthStateProvider
@rendermode InteractiveWebAssembly

<PageTitle>Lista de Productos</PageTitle>

<h1>Lista de Productos</h1>

@if (AuthStateProvider.CurrentUser?.TipoUsuario == "Vendedor")
{
    <div class="mb-3">
        <a href="/productos/agregar" class="btn btn-success">
            <span class="bi bi-plus-circle-fill" aria-hidden="true"></span> Agregar Producto
        </a>
    </div>
}

<p>Esta página muestra los productos obtenidos desde la WebAPI.</p>

@if (productos == null && cargando)
{
    <p><em>Cargando productos...</em></p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (productos != null)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Categoría</th>
                <th>Precio Actual</th>
                <th>Stock</th>
                @if (AuthStateProvider.CurrentUser?.TipoUsuario == "Cliente")
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in productos)
            {
                <tr>
                    <td>@prod.IdProducto</td>
                    <td>
                        <a href="/productos/@prod.IdProducto">@prod.Nombre</a>
                    </td>
                    <td>@prod.Descripcion</td>
                    <td>@prod.CategoriaNombre</td>
                    <td>@prod.PrecioActual.ToString("C")</td>
                    <td>@prod.Stock</td>
                    @if (AuthStateProvider.CurrentUser?.TipoUsuario == "Cliente")
                    {
                        <td>
                            @if (prod.Stock > 0)
                            {
                                <button class="btn btn-sm btn-primary" @onclick="() => AgregarAlCarrito(prod)">
                                    <span class="bi bi-cart-plus-fill" aria-hidden="true"></span> Agregar al carro
                                </button>
                            }
                            else
                            {
                                <span class="text-muted">(Sin stock)</span>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProductoDTO>? productos;
    private bool cargando = true;
    private string? error;

    
    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        cargando = true;
        error = null;
        productos = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            
            productos = (await ProductoApiClient.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar productos: {ex.Message}";
            Console.WriteLine(error);
        }
        finally
        {
            cargando = false;
        }
    }

   
    private async Task AgregarAlCarrito(ProductoDTO producto)
    {
        
        if (AuthStateProvider.CurrentUser == null || AuthStateProvider.CurrentUser.TipoUsuario != "Cliente")
        {
           
            await JSRuntime.InvokeVoidAsync("alert", "Debe iniciar sesión como cliente para comprar.");
            
            Navigation.NavigateTo("/login");
            return;
        }

        
        var cantidadInput = await JSRuntime.InvokeAsync<string>("prompt", $"Ingrese la cantidad para '{producto.Nombre}' (Stock: {producto.Stock}):", "1");

        if (int.TryParse(cantidadInput, out int cantidad) && cantidad > 0)
        {
            if (cantidad > producto.Stock)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Cantidad excede el stock disponible ({producto.Stock}).");
                return;
            }

            try
            {
                
                await CarritoApiClient.AddAsync(AuthStateProvider.CurrentUser.Id, producto.IdProducto, cantidad);
                await JSRuntime.InvokeVoidAsync("alert", $"{cantidad} x '{producto.Nombre}' agregado(s) al carrito.");

                
                if (Layout is not null)
                {
                    await Layout.ActualizarBadgeCarritoAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al agregar al carrito: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error al agregar al carrito: {ex.Message}");
            }
        }
        else if (cantidadInput != null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cantidad inválida.");
        }
    }
}

