@page "/usuarios" // Ruta para esta página
@using DTOs // Para usar UsuarioDTO
@inject HttpClient Http // Para llamar a la API
@inject NavigationManager Navigation // Para navegar a Editar (en el futuro)
@inject IJSRuntime JSRuntime // Para usar confirm/alert en Eliminar
@rendermode InteractiveWebAssembly // Asegura interactividad

<PageTitle>Lista de Usuarios</PageTitle>

<h1>Lista de Usuarios</h1>

<div class="mb-3">
    @* Cambiamos el botón por un link que navega a la nueva página *@
    <a href="/usuarios/agregar" class="btn btn-success">
        <span class="bi bi-person-plus-fill" aria-hidden="true"></span> Agregar Usuario (Registro)
    </a>
</div>

@if (usuarios == null) // Muestra "cargando"
{
    <p><em>Cargando usuarios...</em></p>
}
else // Muestra la tabla
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre Completo</th>
                <th>Email</th>
                <th>Tipo</th>
                <th>Teléfono/CUIL</th> @* Columna combinada *@
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in usuarios)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Apellido, @user.Nombre</td>
                    <td>@user.Email</td>
                    <td>@user.TipoUsuario</td>
                    <td>@ObtenerDatoEspecifico(user)</td> @* Llama a un método helper *@
                    <td>
                        <button class="btn btn-sm btn-warning me-1" @onclick="() => IrAEditar(user.Id)">
                            <span class="bi bi-pencil-fill" aria-hidden="true"></span> Editar
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmarYEliminar(user)">
                            <span class="bi bi-trash-fill" aria-hidden="true"></span> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UsuarioDTO>? usuarios; // Variable para la lista

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios(); // Carga inicial
    }

    private async Task CargarUsuarios()
    {
        usuarios = null;
        StateHasChanged();
        try
        {
            // Llama al endpoint GET /usuarios
            usuarios = await Http.GetFromJsonAsync<List<UsuarioDTO>>("usuarios");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar usuarios: {ex.Message}");
        }
    }

    // Método helper para mostrar Teléfono (Cliente) o CUIL (Vendedor)
    private string ObtenerDatoEspecifico(UsuarioDTO user)
    {
        return user.TipoUsuario == "Cliente" ? user.Telefono ?? "N/A" : user.Cuil ?? "N/A";
    }



    // Navega a la página de edición (la crearemos después) -> AHORA LA ACTIVAMOS
    private void IrAEditar(int idUsuario)
    {
        // --- INICIO CORRECCIÓN ---
        // Quitamos el alert y descomentamos/agregamos la navegación
        Navigation.NavigateTo($"/usuarios/editar/{idUsuario}");
        // JSRuntime.InvokeVoidAsync("alert", $"Funcionalidad 'Editar Usuario' (ID: {idUsuario}) aún no implementada."); // <-- Eliminamos o comentamos esta línea
        // --- FIN CORRECCIÓN ---
    }

    // Lógica para eliminar (similar a Categorías)
    private async Task ConfirmarYEliminar(UsuarioDTO usuario)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar al usuario '{usuario.Nombre} {usuario.Apellido}'?");

        if (confirmado)
        {
            try
            {
                // Llama al endpoint DELETE /usuarios/{id}
                var response = await Http.DeleteAsync($"usuarios/{usuario.Id}");

                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Usuario eliminado con éxito.");
                    await CargarUsuarios(); // Recarga la lista
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar: {errorContent}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
            }
        }
    }
}