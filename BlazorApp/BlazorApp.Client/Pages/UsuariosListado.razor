@page "/usuarios" 
@using DTOs 
@inject HttpClient Http 
@inject NavigationManager Navigation 
@inject IJSRuntime JSRuntime 
@rendermode InteractiveWebAssembly 

<PageTitle>Lista de Usuarios</PageTitle>

<h1>Lista de Usuarios</h1>

<div class="mb-3">
    
    <a href="/usuarios/agregar" class="btn btn-success">
        <span class="bi bi-person-plus-fill" aria-hidden="true"></span> Agregar Usuario (Registro)
    </a>
</div>

@if (usuarios == null) 
{
    <p><em>Cargando usuarios...</em></p>
}
else 
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre Completo</th>
                <th>Email</th>
                <th>Tipo</th>
                <th>Teléfono/CUIL</th> 
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in usuarios)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Apellido, @user.Nombre</td>
                    <td>@user.Email</td>
                    <td>@user.TipoUsuario</td>
                    <td>@ObtenerDatoEspecifico(user)</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" @onclick="() => IrAEditar(user.Id)">
                            <span class="bi bi-pencil-fill" aria-hidden="true"></span> Editar
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmarYEliminar(user)">
                            <span class="bi bi-trash-fill" aria-hidden="true"></span> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UsuarioDTO>? usuarios; 

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        usuarios = null;
        StateHasChanged();
        try
        {
            
            usuarios = await Http.GetFromJsonAsync<List<UsuarioDTO>>("usuarios");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar usuarios: {ex.Message}");
        }
    }

    
    private string ObtenerDatoEspecifico(UsuarioDTO user)
    {
        return user.TipoUsuario == "Cliente" ? user.Telefono ?? "N/A" : user.Cuil ?? "N/A";
    }



    
    private void IrAEditar(int idUsuario)
    {
       
        Navigation.NavigateTo($"/usuarios/editar/{idUsuario}");
       
    }

    
    private async Task ConfirmarYEliminar(UsuarioDTO usuario)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar al usuario '{usuario.Nombre} {usuario.Apellido}'?");

        if (confirmado)
        {
            try
            {
               
                var response = await Http.DeleteAsync($"usuarios/{usuario.Id}");

                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Usuario eliminado con éxito.");
                    await CargarUsuarios(); 
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar: {errorContent}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
            }
        }
    }
}